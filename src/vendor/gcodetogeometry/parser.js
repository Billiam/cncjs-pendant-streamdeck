export default (function () {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */
  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child
    }
    ctor.prototype = parent.prototype
    child.prototype = new ctor()
  }
  function SyntaxError(message, expected, found, offset, line, column) {
    this.message = message
    this.expected = expected
    this.found = found
    this.offset = offset
    this.line = line
    this.column = column
    this.name = 'SyntaxError'
  }
  peg$subclass(SyntaxError, Error)
  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
      peg$FAILED = {},
      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction = peg$parsestart,
      peg$c0 = peg$FAILED,
      peg$c1 = null,
      peg$c2 = [],
      peg$c3 = function (num, words) {
        return { N: num, words: words }
      },
      peg$c4 = function (word, value) {
        return [word, value]
      },
      peg$c5 = 'N',
      peg$c6 = { type: 'literal', value: 'N', description: '"N"' },
      peg$c7 = /^[0-9]/,
      peg$c8 = { type: 'class', value: '[0-9]', description: '[0-9]' },
      peg$c9 = function () {
        return parseInt(text())
      },
      peg$c10 = /^[+\-]/,
      peg$c11 = { type: 'class', value: '[+\\-]', description: '[+\\-]' },
      peg$c12 = /^[.]/,
      peg$c13 = { type: 'class', value: '[.]', description: '[.]' },
      peg$c14 = function () {
        return parseFloat(text())
      },
      peg$c15 = '[',
      peg$c16 = { type: 'literal', value: '[', description: '"["' },
      peg$c17 = ']',
      peg$c18 = { type: 'literal', value: ']', description: '"]"' },
      peg$c19 = function (expr) {
        return expr
      },
      peg$c20 = 'ATAN',
      peg$c21 = { type: 'literal', value: 'ATAN', description: '"ATAN"' },
      peg$c22 = '/',
      peg$c23 = { type: 'literal', value: '/', description: '"/"' },
      peg$c24 = function (left, right) {
        return { op: 'ATAN', left: left, right: right }
      },
      peg$c25 = function (op, expr) {
        return { op: op, right: expr }
      },
      peg$c26 = '#',
      peg$c27 = { type: 'literal', value: '#', description: '"#"' },
      peg$c28 = function (expr) {
        return { op: '#', right: expr }
      },
      peg$c29 = function (first, rest) {
        return buildTree(first, rest)
      },
      peg$c30 = function (first, rest) {
        return buildTree(first, rest)
      },
      peg$c31 = '**',
      peg$c32 = { type: 'literal', value: '**', description: '"**"' },
      peg$c33 = '*',
      peg$c34 = { type: 'literal', value: '*', description: '"*"' },
      peg$c35 = 'MOD',
      peg$c36 = { type: 'literal', value: 'MOD', description: '"MOD"' },
      peg$c37 = '+',
      peg$c38 = { type: 'literal', value: '+', description: '"+"' },
      peg$c39 = '-',
      peg$c40 = { type: 'literal', value: '-', description: '"-"' },
      peg$c41 = 'OR',
      peg$c42 = { type: 'literal', value: 'OR', description: '"OR"' },
      peg$c43 = 'XOR',
      peg$c44 = { type: 'literal', value: 'XOR', description: '"XOR"' },
      peg$c45 = 'AND',
      peg$c46 = { type: 'literal', value: 'AND', description: '"AND"' },
      peg$c47 = 'ABS',
      peg$c48 = { type: 'literal', value: 'ABS', description: '"ABS"' },
      peg$c49 = 'ACOS',
      peg$c50 = { type: 'literal', value: 'ACOS', description: '"ACOS"' },
      peg$c51 = 'ASIN',
      peg$c52 = { type: 'literal', value: 'ASIN', description: '"ASIN"' },
      peg$c53 = 'COS',
      peg$c54 = { type: 'literal', value: 'COS', description: '"COS"' },
      peg$c55 = 'EXP',
      peg$c56 = { type: 'literal', value: 'EXP', description: '"EXP"' },
      peg$c57 = 'FIX',
      peg$c58 = { type: 'literal', value: 'FIX', description: '"FIX"' },
      peg$c59 = 'FUP',
      peg$c60 = { type: 'literal', value: 'FUP', description: '"FUP"' },
      peg$c61 = 'ROUND',
      peg$c62 = { type: 'literal', value: 'ROUND', description: '"ROUND"' },
      peg$c63 = 'LN',
      peg$c64 = { type: 'literal', value: 'LN', description: '"LN"' },
      peg$c65 = 'SIN',
      peg$c66 = { type: 'literal', value: 'SIN', description: '"SIN"' },
      peg$c67 = 'SQRT',
      peg$c68 = { type: 'literal', value: 'SQRT', description: '"SQRT"' },
      peg$c69 = 'TAN',
      peg$c70 = { type: 'literal', value: 'TAN', description: '"TAN"' },
      peg$c71 = 'EXISTS',
      peg$c72 = { type: 'literal', value: 'EXISTS', description: '"EXISTS"' },
      peg$c73 = 'A',
      peg$c74 = { type: 'literal', value: 'A', description: '"A"' },
      peg$c75 = 'B',
      peg$c76 = { type: 'literal', value: 'B', description: '"B"' },
      peg$c77 = 'C',
      peg$c78 = { type: 'literal', value: 'C', description: '"C"' },
      peg$c79 = 'D',
      peg$c80 = { type: 'literal', value: 'D', description: '"D"' },
      peg$c81 = 'F',
      peg$c82 = { type: 'literal', value: 'F', description: '"F"' },
      peg$c83 = 'G',
      peg$c84 = { type: 'literal', value: 'G', description: '"G"' },
      peg$c85 = 'H',
      peg$c86 = { type: 'literal', value: 'H', description: '"H"' },
      peg$c87 = 'I',
      peg$c88 = { type: 'literal', value: 'I', description: '"I"' },
      peg$c89 = 'J',
      peg$c90 = { type: 'literal', value: 'J', description: '"J"' },
      peg$c91 = 'K',
      peg$c92 = { type: 'literal', value: 'K', description: '"K"' },
      peg$c93 = 'L',
      peg$c94 = { type: 'literal', value: 'L', description: '"L"' },
      peg$c95 = 'M',
      peg$c96 = { type: 'literal', value: 'M', description: '"M"' },
      peg$c97 = 'P',
      peg$c98 = { type: 'literal', value: 'P', description: '"P"' },
      peg$c99 = 'Q',
      peg$c100 = { type: 'literal', value: 'Q', description: '"Q"' },
      peg$c101 = 'R',
      peg$c102 = { type: 'literal', value: 'R', description: '"R"' },
      peg$c103 = 'S',
      peg$c104 = { type: 'literal', value: 'S', description: '"S"' },
      peg$c105 = 'T',
      peg$c106 = { type: 'literal', value: 'T', description: '"T"' },
      peg$c107 = 'X',
      peg$c108 = { type: 'literal', value: 'X', description: '"X"' },
      peg$c109 = 'Y',
      peg$c110 = { type: 'literal', value: 'Y', description: '"Y"' },
      peg$c111 = 'Z',
      peg$c112 = { type: 'literal', value: 'Z', description: '"Z"' },
      peg$currPos = 0,
      peg$reportedPos = 0,
      peg$cachedPos = 0,
      peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
      peg$maxFailPos = 0,
      peg$maxFailExpected = [],
      peg$silentFails = 0,
      peg$result
    if ('startRule' in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error(
          'Can\'t start parsing from rule "' + options.startRule + '".'
        )
      }
      peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
    }
    function text() {
      return input.substring(peg$reportedPos, peg$currPos)
    }
    function offset() {
      return peg$reportedPos
    }
    function line() {
      return peg$computePosDetails(peg$reportedPos).line
    }
    function column() {
      return peg$computePosDetails(peg$reportedPos).column
    }
    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: 'other', description: description }],
        peg$reportedPos
      )
    }
    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos)
    }
    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch
        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p)
          if (ch === '\n') {
            if (!details.seenCR) {
              details.line++
            }
            details.column = 1
            details.seenCR = false
          } else if (ch === '\r' || ch === '\u2028' || ch === '\u2029') {
            details.line++
            details.column = 1
            details.seenCR = true
          } else {
            details.column++
            details.seenCR = false
          }
        }
      }
      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false }
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos)
        peg$cachedPos = pos
      }
      return peg$cachedPosDetails
    }
    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return
      }
      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos
        peg$maxFailExpected = []
      }
      peg$maxFailExpected.push(expected)
    }
    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1
        expected.sort(function (a, b) {
          if (a.description < b.description) {
            return -1
          } else if (a.description > b.description) {
            return 1
          } else {
            return 0
          }
        })
        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1)
          } else {
            i++
          }
        }
      }
      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase()
          }
          return s
            .replace(/\\/g, '\\\\')
            .replace(/"/g, '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g, '\\t')
            .replace(/\n/g, '\\n')
            .replace(/\f/g, '\\f')
            .replace(/\r/g, '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) {
              return '\\x0' + hex(ch)
            })
            .replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) {
              return '\\x' + hex(ch)
            })
            .replace(/[\u0180-\u0FFF]/g, function (ch) {
              return '\\u0' + hex(ch)
            })
            .replace(/[\u1080-\uFFFF]/g, function (ch) {
              return '\\u' + hex(ch)
            })
        }
        var expectedDescs = new Array(expected.length),
          expectedDesc,
          foundDesc,
          i
        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description
        }
        expectedDesc =
          expected.length > 1
            ? expectedDescs.slice(0, -1).join(', ') +
              ' or ' +
              expectedDescs[expected.length - 1]
            : expectedDescs[0]
        foundDesc = found ? '"' + stringEscape(found) + '"' : 'end of input'
        return 'Expected ' + expectedDesc + ' but ' + foundDesc + ' found.'
      }
      var posDetails = peg$computePosDetails(pos),
        found = pos < input.length ? input.charAt(pos) : null
      if (expected !== null) {
        cleanupExpected(expected)
      }
      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      )
    }
    function peg$parsestart() {
      var s0
      s0 = peg$parseline()
      return s0
    }
    function peg$parseline() {
      var s0, s1, s2, s3
      s0 = peg$currPos
      s1 = peg$parseline_number()
      if (s1 === peg$FAILED) {
        s1 = peg$c1
      }
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$parseword()
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$parseword()
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0
          s1 = peg$c3(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$c0
        }
      } else {
        peg$currPos = s0
        s0 = peg$c0
      }
      return s0
    }
    function peg$parseword() {
      var s0, s1, s2
      s0 = peg$currPos
      s1 = peg$parseletter()
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefactor1()
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0
          s1 = peg$c4(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$c0
        }
      } else {
        peg$currPos = s0
        s0 = peg$c0
      }
      return s0
    }
    function peg$parseline_number() {
      var s0, s1, s2
      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 78) {
        s1 = peg$c5
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c6)
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger()
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$c0
        }
      } else {
        peg$currPos = s0
        s0 = peg$c0
      }
      return s0
    }
    function peg$parseinteger() {
      var s0, s1, s2
      s0 = peg$currPos
      s1 = []
      if (peg$c7.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c8)
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2)
          if (peg$c7.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c8)
            }
          }
        }
      } else {
        s1 = peg$c0
      }
      if (s1 !== peg$FAILED) {
        peg$reportedPos = s0
        s1 = peg$c9()
      }
      s0 = s1
      return s0
    }
    function peg$parsenumber() {
      var s0, s1, s2, s3, s4, s5, s6
      s0 = peg$currPos
      if (peg$c10.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c11)
        }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$c1
      }
      if (s1 !== peg$FAILED) {
        s2 = []
        if (peg$c7.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c8)
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3)
            if (peg$c7.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s3 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c8)
              }
            }
          }
        } else {
          s2 = peg$c0
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos
          if (peg$c12.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s4 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c13)
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = []
            if (peg$c7.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s6 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c8)
              }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6)
                if (peg$c7.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos)
                  peg$currPos++
                } else {
                  s6 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c8)
                  }
                }
              }
            } else {
              s5 = peg$c0
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$c0
            }
          } else {
            peg$currPos = s3
            s3 = peg$c0
          }
          if (s3 === peg$FAILED) {
            s3 = peg$c1
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0
            s1 = peg$c14()
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$c0
          }
        } else {
          peg$currPos = s0
          s0 = peg$c0
        }
      } else {
        peg$currPos = s0
        s0 = peg$c0
      }
      return s0
    }
    function peg$parseexpression() {
      var s0, s1, s2, s3
      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c15
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c16)
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefactor4()
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c17
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c18)
            }
          }
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0
            s1 = peg$c19(s2)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$c0
          }
        } else {
          peg$currPos = s0
          s0 = peg$c0
        }
      } else {
        peg$currPos = s0
        s0 = peg$c0
      }
      return s0
    }
    function peg$parseatan_factor() {
      var s0, s1, s2, s3, s4
      s0 = peg$currPos
      if (input.substr(peg$currPos, 4) === peg$c20) {
        s1 = peg$c20
        peg$currPos += 4
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c21)
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpression()
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c22
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c23)
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexpression()
            if (s4 !== peg$FAILED) {
              peg$reportedPos = s0
              s1 = peg$c24(s2, s4)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$c0
            }
          } else {
            peg$currPos = s0
            s0 = peg$c0
          }
        } else {
          peg$currPos = s0
          s0 = peg$c0
        }
      } else {
        peg$currPos = s0
        s0 = peg$c0
      }
      return s0
    }
    function peg$parseunary_factor() {
      var s0, s1, s2
      s0 = peg$currPos
      s1 = peg$parseunary_op()
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpression()
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0
          s1 = peg$c25(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$c0
        }
      } else {
        peg$currPos = s0
        s0 = peg$c0
      }
      return s0
    }
    function peg$parseparam_value() {
      var s0, s1, s2
      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c26
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c27)
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpression()
        if (s2 === peg$FAILED) {
          s2 = peg$parsenumber()
          if (s2 === peg$FAILED) {
            s2 = peg$parseparam_value()
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0
          s1 = peg$c28(s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$c0
        }
      } else {
        peg$currPos = s0
        s0 = peg$c0
      }
      return s0
    }
    function peg$parsefactor1() {
      var s0
      s0 = peg$parseexpression()
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumber()
        if (s0 === peg$FAILED) {
          s0 = peg$parseatan_factor()
          if (s0 === peg$FAILED) {
            s0 = peg$parseunary_factor()
            if (s0 === peg$FAILED) {
              s0 = peg$parseparam_value()
            }
          }
        }
      }
      return s0
    }
    function peg$parsefactor2() {
      var s0, s1, s2, s3, s4, s5
      s0 = peg$currPos
      s1 = peg$parsefactor1()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$parsegroup1_op()
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefactor1()
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$c0
          }
        } else {
          peg$currPos = s3
          s3 = peg$c0
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$parsegroup1_op()
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefactor1()
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$c0
            }
          } else {
            peg$currPos = s3
            s3 = peg$c0
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0
          s1 = peg$c29(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$c0
        }
      } else {
        peg$currPos = s0
        s0 = peg$c0
      }
      return s0
    }
    function peg$parsefactor3() {
      var s0, s1, s2, s3, s4, s5
      s0 = peg$currPos
      s1 = peg$parsefactor2()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$parsegroup2_op()
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefactor2()
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$c0
          }
        } else {
          peg$currPos = s3
          s3 = peg$c0
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$parsegroup2_op()
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefactor2()
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$c0
            }
          } else {
            peg$currPos = s3
            s3 = peg$c0
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0
          s1 = peg$c30(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$c0
        }
      } else {
        peg$currPos = s0
        s0 = peg$c0
      }
      return s0
    }
    function peg$parsefactor4() {
      var s0, s1, s2, s3, s4, s5
      s0 = peg$currPos
      s1 = peg$parsefactor3()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$parsegroup3_op()
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefactor3()
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$c0
          }
        } else {
          peg$currPos = s3
          s3 = peg$c0
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$parsegroup3_op()
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefactor3()
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$c0
            }
          } else {
            peg$currPos = s3
            s3 = peg$c0
          }
        }
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0
          s1 = peg$c30(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$c0
        }
      } else {
        peg$currPos = s0
        s0 = peg$c0
      }
      return s0
    }
    function peg$parsegroup1_op() {
      var s0
      if (input.substr(peg$currPos, 2) === peg$c31) {
        s0 = peg$c31
        peg$currPos += 2
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c32)
        }
      }
      return s0
    }
    function peg$parsegroup2_op() {
      var s0
      if (input.charCodeAt(peg$currPos) === 42) {
        s0 = peg$c33
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c34)
        }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s0 = peg$c22
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c23)
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c35) {
            s0 = peg$c35
            peg$currPos += 3
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c36)
            }
          }
        }
      }
      return s0
    }
    function peg$parsegroup3_op() {
      var s0
      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c37
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c38)
        }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c39
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c40)
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c41) {
            s0 = peg$c41
            peg$currPos += 2
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c42)
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c43) {
              s0 = peg$c43
              peg$currPos += 3
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c44)
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c45) {
                s0 = peg$c45
                peg$currPos += 3
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c46)
                }
              }
            }
          }
        }
      }
      return s0
    }
    function peg$parseunary_op() {
      var s0
      if (input.substr(peg$currPos, 3) === peg$c47) {
        s0 = peg$c47
        peg$currPos += 3
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c48)
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c49) {
          s0 = peg$c49
          peg$currPos += 4
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c50)
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c51) {
            s0 = peg$c51
            peg$currPos += 4
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c52)
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c53) {
              s0 = peg$c53
              peg$currPos += 3
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c54)
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c55) {
                s0 = peg$c55
                peg$currPos += 3
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c56)
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c57) {
                  s0 = peg$c57
                  peg$currPos += 3
                } else {
                  s0 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c58)
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c59) {
                    s0 = peg$c59
                    peg$currPos += 3
                  } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c60)
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c61) {
                      s0 = peg$c61
                      peg$currPos += 5
                    } else {
                      s0 = peg$FAILED
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c62)
                      }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c63) {
                        s0 = peg$c63
                        peg$currPos += 2
                      } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c64)
                        }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c65) {
                          s0 = peg$c65
                          peg$currPos += 3
                        } else {
                          s0 = peg$FAILED
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c66)
                          }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c67) {
                            s0 = peg$c67
                            peg$currPos += 4
                          } else {
                            s0 = peg$FAILED
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c68)
                            }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c69) {
                              s0 = peg$c69
                              peg$currPos += 3
                            } else {
                              s0 = peg$FAILED
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c70)
                              }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 6) === peg$c71) {
                                s0 = peg$c71
                                peg$currPos += 6
                              } else {
                                s0 = peg$FAILED
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c72)
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return s0
    }
    function peg$parseletter() {
      var s0
      if (input.charCodeAt(peg$currPos) === 65) {
        s0 = peg$c73
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c74)
        }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 66) {
          s0 = peg$c75
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c76)
          }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 67) {
            s0 = peg$c77
            peg$currPos++
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c78)
            }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 68) {
              s0 = peg$c79
              peg$currPos++
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c80)
              }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 70) {
                s0 = peg$c81
                peg$currPos++
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c82)
                }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 71) {
                  s0 = peg$c83
                  peg$currPos++
                } else {
                  s0 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c84)
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 72) {
                    s0 = peg$c85
                    peg$currPos++
                  } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c86)
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 73) {
                      s0 = peg$c87
                      peg$currPos++
                    } else {
                      s0 = peg$FAILED
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c88)
                      }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 74) {
                        s0 = peg$c89
                        peg$currPos++
                      } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c90)
                        }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 75) {
                          s0 = peg$c91
                          peg$currPos++
                        } else {
                          s0 = peg$FAILED
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c92)
                          }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 76) {
                            s0 = peg$c93
                            peg$currPos++
                          } else {
                            s0 = peg$FAILED
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c94)
                            }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 77) {
                              s0 = peg$c95
                              peg$currPos++
                            } else {
                              s0 = peg$FAILED
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c96)
                              }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 80) {
                                s0 = peg$c97
                                peg$currPos++
                              } else {
                                s0 = peg$FAILED
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c98)
                                }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 81) {
                                  s0 = peg$c99
                                  peg$currPos++
                                } else {
                                  s0 = peg$FAILED
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$c100)
                                  }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 82) {
                                    s0 = peg$c101
                                    peg$currPos++
                                  } else {
                                    s0 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                      peg$fail(peg$c102)
                                    }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 83) {
                                      s0 = peg$c103
                                      peg$currPos++
                                    } else {
                                      s0 = peg$FAILED
                                      if (peg$silentFails === 0) {
                                        peg$fail(peg$c104)
                                      }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (
                                        input.charCodeAt(peg$currPos) === 84
                                      ) {
                                        s0 = peg$c105
                                        peg$currPos++
                                      } else {
                                        s0 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                          peg$fail(peg$c106)
                                        }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (
                                          input.charCodeAt(peg$currPos) === 88
                                        ) {
                                          s0 = peg$c107
                                          peg$currPos++
                                        } else {
                                          s0 = peg$FAILED
                                          if (peg$silentFails === 0) {
                                            peg$fail(peg$c108)
                                          }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (
                                            input.charCodeAt(peg$currPos) === 89
                                          ) {
                                            s0 = peg$c109
                                            peg$currPos++
                                          } else {
                                            s0 = peg$FAILED
                                            if (peg$silentFails === 0) {
                                              peg$fail(peg$c110)
                                            }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (
                                              input.charCodeAt(peg$currPos) ===
                                              90
                                            ) {
                                              s0 = peg$c111
                                              peg$currPos++
                                            } else {
                                              s0 = peg$FAILED
                                              if (peg$silentFails === 0) {
                                                peg$fail(peg$c112)
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return s0
    }
    function buildTree(first, rest) {
      if (rest.length == 0) {
        return first
      } else {
        var next = rest.shift()
        var operator = next[0]
        var term = next[1]
        return { left: first, right: buildTree(term, rest), op: operator }
      }
    }
    peg$result = peg$startRuleFunction()
    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: 'end', description: 'end of input' })
      }
      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos)
    }
  }
  return {
    SyntaxError: SyntaxError,
    parse: parse,
  }
})()
