export default /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function () {
  'use strict'

  function peg$subclass(child, parent) {
    function ctor() {
      this.constructor = child
    }
    ctor.prototype = parent.prototype
    child.prototype = new ctor()
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message
    this.expected = expected
    this.found = found
    this.location = location
    this.name = 'SyntaxError'

    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, peg$SyntaxError)
    }
  }

  peg$subclass(peg$SyntaxError, Error)

  peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function (expectation) {
        return '"' + literalEscape(expectation.text) + '"'
      },

      class: function (expectation) {
        var escapedParts = '',
          i

        for (i = 0; i < expectation.parts.length; i++) {
          escapedParts +=
            expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) +
                '-' +
                classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i])
        }

        return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']'
      },

      any: function (expectation) {
        return 'any character'
      },

      end: function (expectation) {
        return 'end of input'
      },

      other: function (expectation) {
        return expectation.description
      },
    }

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase()
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g, function (ch) {
          return '\\x0' + hex(ch)
        })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
          return '\\x' + hex(ch)
        })
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g, '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g, function (ch) {
          return '\\x0' + hex(ch)
        })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
          return '\\x' + hex(ch)
        })
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
        i,
        j

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i])
      }

      descriptions.sort()

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i]
            j++
          }
        }
        descriptions.length = j
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0]

        case 2:
          return descriptions[0] + ' or ' + descriptions[1]

        default:
          return (
            descriptions.slice(0, -1).join(', ') +
            ', or ' +
            descriptions[descriptions.length - 1]
          )
      }
    }

    function describeFound(found) {
      return found ? '"' + literalEscape(found) + '"' : 'end of input'
    }

    return (
      'Expected ' +
      describeExpected(expected) +
      ' but ' +
      describeFound(found) +
      ' found.'
    )
  }

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {}

    var peg$FAILED = {},
      peg$startRuleFunctions = { start: peg$parsestart },
      peg$startRuleFunction = peg$parsestart,
      peg$c0 = function (num, words) {
        return { N: num, words: words }
      },
      peg$c1 = function (word, value) {
        return [word, value]
      },
      peg$c2 = 'N',
      peg$c3 = peg$literalExpectation('N', false),
      peg$c4 = /^[0-9]/,
      peg$c5 = peg$classExpectation([['0', '9']], false, false),
      peg$c6 = function () {
        return parseInt(text())
      },
      peg$c7 = /^[+\-]/,
      peg$c8 = peg$classExpectation(['+', '-'], false, false),
      peg$c9 = /^[.]/,
      peg$c10 = peg$classExpectation(['.'], false, false),
      peg$c11 = function () {
        return parseFloat(text())
      },
      peg$c12 = '[',
      peg$c13 = peg$literalExpectation('[', false),
      peg$c14 = ']',
      peg$c15 = peg$literalExpectation(']', false),
      peg$c16 = function (expr) {
        return expr
      },
      peg$c17 = 'ATAN',
      peg$c18 = peg$literalExpectation('ATAN', false),
      peg$c19 = '/',
      peg$c20 = peg$literalExpectation('/', false),
      peg$c21 = function (left, right) {
        return { op: 'ATAN', left: left, right: right }
      },
      peg$c22 = function (op, expr) {
        return { op: op, right: expr }
      },
      peg$c23 = '#',
      peg$c24 = peg$literalExpectation('#', false),
      peg$c25 = function (expr) {
        return { op: '#', right: expr }
      },
      peg$c26 = function (first, rest) {
        return buildTree(first, rest)
      },
      peg$c27 = '**',
      peg$c28 = peg$literalExpectation('**', false),
      peg$c29 = '*',
      peg$c30 = peg$literalExpectation('*', false),
      peg$c31 = 'MOD',
      peg$c32 = peg$literalExpectation('MOD', false),
      peg$c33 = '+',
      peg$c34 = peg$literalExpectation('+', false),
      peg$c35 = '-',
      peg$c36 = peg$literalExpectation('-', false),
      peg$c37 = 'OR',
      peg$c38 = peg$literalExpectation('OR', false),
      peg$c39 = 'XOR',
      peg$c40 = peg$literalExpectation('XOR', false),
      peg$c41 = 'AND',
      peg$c42 = peg$literalExpectation('AND', false),
      peg$c43 = 'ABS',
      peg$c44 = peg$literalExpectation('ABS', false),
      peg$c45 = 'ACOS',
      peg$c46 = peg$literalExpectation('ACOS', false),
      peg$c47 = 'ASIN',
      peg$c48 = peg$literalExpectation('ASIN', false),
      peg$c49 = 'COS',
      peg$c50 = peg$literalExpectation('COS', false),
      peg$c51 = 'EXP',
      peg$c52 = peg$literalExpectation('EXP', false),
      peg$c53 = 'FIX',
      peg$c54 = peg$literalExpectation('FIX', false),
      peg$c55 = 'FUP',
      peg$c56 = peg$literalExpectation('FUP', false),
      peg$c57 = 'ROUND',
      peg$c58 = peg$literalExpectation('ROUND', false),
      peg$c59 = 'LN',
      peg$c60 = peg$literalExpectation('LN', false),
      peg$c61 = 'SIN',
      peg$c62 = peg$literalExpectation('SIN', false),
      peg$c63 = 'SQRT',
      peg$c64 = peg$literalExpectation('SQRT', false),
      peg$c65 = 'TAN',
      peg$c66 = peg$literalExpectation('TAN', false),
      peg$c67 = 'EXISTS',
      peg$c68 = peg$literalExpectation('EXISTS', false),
      peg$c69 = 'A',
      peg$c70 = peg$literalExpectation('A', false),
      peg$c71 = 'B',
      peg$c72 = peg$literalExpectation('B', false),
      peg$c73 = 'C',
      peg$c74 = peg$literalExpectation('C', false),
      peg$c75 = 'D',
      peg$c76 = peg$literalExpectation('D', false),
      peg$c77 = 'F',
      peg$c78 = peg$literalExpectation('F', false),
      peg$c79 = 'G',
      peg$c80 = peg$literalExpectation('G', false),
      peg$c81 = 'H',
      peg$c82 = peg$literalExpectation('H', false),
      peg$c83 = 'I',
      peg$c84 = peg$literalExpectation('I', false),
      peg$c85 = 'J',
      peg$c86 = peg$literalExpectation('J', false),
      peg$c87 = 'K',
      peg$c88 = peg$literalExpectation('K', false),
      peg$c89 = 'L',
      peg$c90 = peg$literalExpectation('L', false),
      peg$c91 = 'M',
      peg$c92 = peg$literalExpectation('M', false),
      peg$c93 = 'P',
      peg$c94 = peg$literalExpectation('P', false),
      peg$c95 = 'Q',
      peg$c96 = peg$literalExpectation('Q', false),
      peg$c97 = 'R',
      peg$c98 = peg$literalExpectation('R', false),
      peg$c99 = 'S',
      peg$c100 = peg$literalExpectation('S', false),
      peg$c101 = 'T',
      peg$c102 = peg$literalExpectation('T', false),
      peg$c103 = 'X',
      peg$c104 = peg$literalExpectation('X', false),
      peg$c105 = 'Y',
      peg$c106 = peg$literalExpectation('Y', false),
      peg$c107 = 'Z',
      peg$c108 = peg$literalExpectation('Z', false),
      peg$currPos = 0,
      peg$savedPos = 0,
      peg$posDetailsCache = [{ line: 1, column: 1 }],
      peg$maxFailPos = 0,
      peg$maxFailExpected = [],
      peg$silentFails = 0,
      peg$result

    if ('startRule' in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error(
          'Can\'t start parsing from rule "' + options.startRule + '".'
        )
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos)
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos)
    }

    function expected(description, location) {
      location =
        location !== void 0
          ? location
          : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      )
    }

    function error(message, location) {
      location =
        location !== void 0
          ? location
          : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location)
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: 'literal', text: text, ignoreCase: ignoreCase }
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return {
        type: 'class',
        parts: parts,
        inverted: inverted,
        ignoreCase: ignoreCase,
      }
    }

    function peg$anyExpectation() {
      return { type: 'any' }
    }

    function peg$endExpectation() {
      return { type: 'end' }
    }

    function peg$otherExpectation(description) {
      return { type: 'other', description: description }
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
        p

      if (details) {
        return details
      } else {
        p = pos - 1
        while (!peg$posDetailsCache[p]) {
          p--
        }

        details = peg$posDetailsCache[p]
        details = {
          line: details.line,
          column: details.column,
        }

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++
            details.column = 1
          } else {
            details.column++
          }

          p++
        }

        peg$posDetailsCache[pos] = details
        return details
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails = peg$computePosDetails(endPos)

      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column,
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column,
        },
      }
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) {
        return
      }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos
        peg$maxFailExpected = []
      }

      peg$maxFailExpected.push(expected)
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location)
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      )
    }

    function peg$parsestart() {
      var s0

      s0 = peg$parseline()

      return s0
    }

    function peg$parseline() {
      var s0, s1, s2, s3

      s0 = peg$currPos
      s1 = peg$parseline_number()
      if (s1 === peg$FAILED) {
        s1 = null
      }
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$parseword()
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$parseword()
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c0(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseword() {
      var s0, s1, s2

      s0 = peg$currPos
      s1 = peg$parseletter()
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefactor1()
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c1(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseline_number() {
      var s0, s1, s2

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 78) {
        s1 = peg$c2
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c3)
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger()
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2]
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseinteger() {
      var s0, s1, s2

      s0 = peg$currPos
      s1 = []
      if (peg$c4.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c5)
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2)
          if (peg$c4.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s2 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c5)
            }
          }
        }
      } else {
        s1 = peg$FAILED
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0
        s1 = peg$c6()
      }
      s0 = s1

      return s0
    }

    function peg$parsenumber() {
      var s0, s1, s2, s3, s4, s5, s6

      s0 = peg$currPos
      if (peg$c7.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c8)
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos
        s3 = []
        if (peg$c4.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c5)
          }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4)
            if (peg$c4.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s4 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c5)
              }
            }
          }
        } else {
          s3 = peg$FAILED
        }
        if (s3 !== peg$FAILED) {
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s4 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c10)
            }
          }
          if (s4 === peg$FAILED) {
            s4 = null
          }
          if (s4 !== peg$FAILED) {
            s5 = []
            if (peg$c4.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s6 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c5)
              }
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6)
              if (peg$c4.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos)
                peg$currPos++
              } else {
                s6 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c5)
                }
              }
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5]
              s2 = s3
            } else {
              peg$currPos = s2
              s2 = peg$FAILED
            }
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c10)
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = []
            if (peg$c4.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c5)
              }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5)
                if (peg$c4.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos)
                  peg$currPos++
                } else {
                  s5 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c5)
                  }
                }
              }
            } else {
              s4 = peg$FAILED
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4]
              s2 = s3
            } else {
              peg$currPos = s2
              s2 = peg$FAILED
            }
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c11()
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseexpression() {
      var s0, s1, s2, s3

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c12
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c13)
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefactor4()
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c14
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c15)
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c16(s2)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseatan_factor() {
      var s0, s1, s2, s3, s4

      s0 = peg$currPos
      if (input.substr(peg$currPos, 4) === peg$c17) {
        s1 = peg$c17
        peg$currPos += 4
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c18)
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpression()
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s3 = peg$c19
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c20)
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexpression()
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c21(s2, s4)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseunary_factor() {
      var s0, s1, s2

      s0 = peg$currPos
      s1 = peg$parseunary_op()
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpression()
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c22(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseparam_value() {
      var s0, s1, s2

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c23
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c24)
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpression()
        if (s2 === peg$FAILED) {
          s2 = peg$parsenumber()
          if (s2 === peg$FAILED) {
            s2 = peg$parseparam_value()
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c25(s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsefactor1() {
      var s0

      s0 = peg$parseexpression()
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumber()
        if (s0 === peg$FAILED) {
          s0 = peg$parseatan_factor()
          if (s0 === peg$FAILED) {
            s0 = peg$parseunary_factor()
            if (s0 === peg$FAILED) {
              s0 = peg$parseparam_value()
            }
          }
        }
      }

      return s0
    }

    function peg$parsefactor2() {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      s1 = peg$parsefactor1()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$parsegroup1_op()
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefactor1()
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$parsegroup1_op()
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefactor1()
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c26(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsefactor3() {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      s1 = peg$parsefactor2()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$parsegroup2_op()
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefactor2()
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$parsegroup2_op()
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefactor2()
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c26(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsefactor4() {
      var s0, s1, s2, s3, s4, s5

      s0 = peg$currPos
      s1 = peg$parsefactor3()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        s4 = peg$parsegroup3_op()
        if (s4 !== peg$FAILED) {
          s5 = peg$parsefactor3()
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5]
            s3 = s4
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          s4 = peg$parsegroup3_op()
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefactor3()
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5]
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c26(s1, s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsegroup1_op() {
      var s0

      if (input.substr(peg$currPos, 2) === peg$c27) {
        s0 = peg$c27
        peg$currPos += 2
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c28)
        }
      }

      return s0
    }

    function peg$parsegroup2_op() {
      var s0

      if (input.charCodeAt(peg$currPos) === 42) {
        s0 = peg$c29
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c30)
        }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s0 = peg$c19
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c20)
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c31) {
            s0 = peg$c31
            peg$currPos += 3
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c32)
            }
          }
        }
      }

      return s0
    }

    function peg$parsegroup3_op() {
      var s0

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c33
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c34)
        }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s0 = peg$c35
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c36)
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c37) {
            s0 = peg$c37
            peg$currPos += 2
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c38)
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c39) {
              s0 = peg$c39
              peg$currPos += 3
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c40)
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c41) {
                s0 = peg$c41
                peg$currPos += 3
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c42)
                }
              }
            }
          }
        }
      }

      return s0
    }

    function peg$parseunary_op() {
      var s0

      if (input.substr(peg$currPos, 3) === peg$c43) {
        s0 = peg$c43
        peg$currPos += 3
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c44)
        }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c45) {
          s0 = peg$c45
          peg$currPos += 4
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c46)
          }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c47) {
            s0 = peg$c47
            peg$currPos += 4
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c48)
            }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c49) {
              s0 = peg$c49
              peg$currPos += 3
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c50)
              }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c51) {
                s0 = peg$c51
                peg$currPos += 3
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c52)
                }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c53) {
                  s0 = peg$c53
                  peg$currPos += 3
                } else {
                  s0 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c54)
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c55) {
                    s0 = peg$c55
                    peg$currPos += 3
                  } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c56)
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 5) === peg$c57) {
                      s0 = peg$c57
                      peg$currPos += 5
                    } else {
                      s0 = peg$FAILED
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c58)
                      }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c59) {
                        s0 = peg$c59
                        peg$currPos += 2
                      } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c60)
                        }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c61) {
                          s0 = peg$c61
                          peg$currPos += 3
                        } else {
                          s0 = peg$FAILED
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c62)
                          }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 4) === peg$c63) {
                            s0 = peg$c63
                            peg$currPos += 4
                          } else {
                            s0 = peg$FAILED
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c64)
                            }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c65) {
                              s0 = peg$c65
                              peg$currPos += 3
                            } else {
                              s0 = peg$FAILED
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c66)
                              }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 6) === peg$c67) {
                                s0 = peg$c67
                                peg$currPos += 6
                              } else {
                                s0 = peg$FAILED
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c68)
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0
    }

    function peg$parseletter() {
      var s0

      if (input.charCodeAt(peg$currPos) === 65) {
        s0 = peg$c69
        peg$currPos++
      } else {
        s0 = peg$FAILED
        if (peg$silentFails === 0) {
          peg$fail(peg$c70)
        }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 66) {
          s0 = peg$c71
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) {
            peg$fail(peg$c72)
          }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 67) {
            s0 = peg$c73
            peg$currPos++
          } else {
            s0 = peg$FAILED
            if (peg$silentFails === 0) {
              peg$fail(peg$c74)
            }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 68) {
              s0 = peg$c75
              peg$currPos++
            } else {
              s0 = peg$FAILED
              if (peg$silentFails === 0) {
                peg$fail(peg$c76)
              }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 70) {
                s0 = peg$c77
                peg$currPos++
              } else {
                s0 = peg$FAILED
                if (peg$silentFails === 0) {
                  peg$fail(peg$c78)
                }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 71) {
                  s0 = peg$c79
                  peg$currPos++
                } else {
                  s0 = peg$FAILED
                  if (peg$silentFails === 0) {
                    peg$fail(peg$c80)
                  }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 72) {
                    s0 = peg$c81
                    peg$currPos++
                  } else {
                    s0 = peg$FAILED
                    if (peg$silentFails === 0) {
                      peg$fail(peg$c82)
                    }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 73) {
                      s0 = peg$c83
                      peg$currPos++
                    } else {
                      s0 = peg$FAILED
                      if (peg$silentFails === 0) {
                        peg$fail(peg$c84)
                      }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 74) {
                        s0 = peg$c85
                        peg$currPos++
                      } else {
                        s0 = peg$FAILED
                        if (peg$silentFails === 0) {
                          peg$fail(peg$c86)
                        }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 75) {
                          s0 = peg$c87
                          peg$currPos++
                        } else {
                          s0 = peg$FAILED
                          if (peg$silentFails === 0) {
                            peg$fail(peg$c88)
                          }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 76) {
                            s0 = peg$c89
                            peg$currPos++
                          } else {
                            s0 = peg$FAILED
                            if (peg$silentFails === 0) {
                              peg$fail(peg$c90)
                            }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 77) {
                              s0 = peg$c91
                              peg$currPos++
                            } else {
                              s0 = peg$FAILED
                              if (peg$silentFails === 0) {
                                peg$fail(peg$c92)
                              }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 80) {
                                s0 = peg$c93
                                peg$currPos++
                              } else {
                                s0 = peg$FAILED
                                if (peg$silentFails === 0) {
                                  peg$fail(peg$c94)
                                }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 81) {
                                  s0 = peg$c95
                                  peg$currPos++
                                } else {
                                  s0 = peg$FAILED
                                  if (peg$silentFails === 0) {
                                    peg$fail(peg$c96)
                                  }
                                }
                                if (s0 === peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 82) {
                                    s0 = peg$c97
                                    peg$currPos++
                                  } else {
                                    s0 = peg$FAILED
                                    if (peg$silentFails === 0) {
                                      peg$fail(peg$c98)
                                    }
                                  }
                                  if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 83) {
                                      s0 = peg$c99
                                      peg$currPos++
                                    } else {
                                      s0 = peg$FAILED
                                      if (peg$silentFails === 0) {
                                        peg$fail(peg$c100)
                                      }
                                    }
                                    if (s0 === peg$FAILED) {
                                      if (
                                        input.charCodeAt(peg$currPos) === 84
                                      ) {
                                        s0 = peg$c101
                                        peg$currPos++
                                      } else {
                                        s0 = peg$FAILED
                                        if (peg$silentFails === 0) {
                                          peg$fail(peg$c102)
                                        }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (
                                          input.charCodeAt(peg$currPos) === 88
                                        ) {
                                          s0 = peg$c103
                                          peg$currPos++
                                        } else {
                                          s0 = peg$FAILED
                                          if (peg$silentFails === 0) {
                                            peg$fail(peg$c104)
                                          }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (
                                            input.charCodeAt(peg$currPos) === 89
                                          ) {
                                            s0 = peg$c105
                                            peg$currPos++
                                          } else {
                                            s0 = peg$FAILED
                                            if (peg$silentFails === 0) {
                                              peg$fail(peg$c106)
                                            }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (
                                              input.charCodeAt(peg$currPos) ===
                                              90
                                            ) {
                                              s0 = peg$c107
                                              peg$currPos++
                                            } else {
                                              s0 = peg$FAILED
                                              if (peg$silentFails === 0) {
                                                peg$fail(peg$c108)
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0
    }

    function buildTree(first, rest) {
      if (rest.length == 0) {
        return first
      } else {
        var next = rest.shift()
        var operator = next[0]
        var term = next[1]
        return { left: first, right: buildTree(term, rest), op: operator }
      }
    }

    peg$result = peg$startRuleFunction()

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation())
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      )
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse,
  }
})()
